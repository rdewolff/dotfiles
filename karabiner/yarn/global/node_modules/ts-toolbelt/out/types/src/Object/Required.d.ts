import { Merge } from './Merge';
import { Pick } from './Pick';
import { Depth } from './_Internal';
import { Index } from '../Any/Index';
import { Implements } from '../Any/Implements';
declare type RequiredFlat<O> = {
    [K in keyof O]-?: O[K];
} & {};
declare type RequiredDeep<O> = {
    [K in keyof O]-?: RequiredDeep<O[K]>;
} & {};
declare type RequiredPart<O extends object, depth extends Depth> = {
    'flat': RequiredFlat<O>;
    'deep': RequiredDeep<O>;
}[depth];
/** Make some fields of **`O`** required (deeply or not)
 * @param O to make required
 * @param K to choose fields (?=`keyof O`)
 * @param depth to do it deeply (?=`'flat'`)
 * @returns **`object`**
 * @example
 * ```ts
 * ```
 */
export declare type Required<O extends object, K extends Index = keyof O, depth extends Depth = 'flat'> = {
    1: RequiredPart<O, depth>;
    0: Merge<RequiredPart<Pick<O, K>, depth>, O>;
}[Implements<keyof O, K>];
export {};
