import { IterationOf } from '../../Iteration/IterationOf';
import { Iteration } from '../../Iteration/Iteration';
import { Pos } from '../../Iteration/Pos';
import { Next } from '../../Iteration/Next';
import { Path as PPath } from './_Internal';
import { Index } from '../../Any/Index';
import { Update as OUpdate } from '../Update';
import { LastIndex } from '../../Tuple/LastIndex';
import { Tuple } from '../../Tuple/Tuple';
declare type _Update<O, Path extends Tuple<Index>, A, I extends Iteration = IterationOf<'0'>> = O extends object ? Pos<I> extends LastIndex<Path> ? OUpdate<O, Path[Pos<I>], A> : {
    [K in keyof O]: K extends Path[Pos<I>] ? _Update<O[K], Path, A, Next<I>> : O[K];
} & {} : O;
/** Update in **`O`** the fields at **`Path`** with **`A`**
 * (⚠️ this type is expensive)
 * @param O to update
 * @param Path to be followed
 * @param A to update with
 * @returns **`object`**
 * @example
 * ```ts
 * ```
 */
export declare type Update<O extends object, Path extends PPath, A extends any> = _Update<O, Path, A>;
export {};
