import { Omit } from './Omit';
import { At } from './At';
import { Exclude } from '../Union/Exclude';
import { Numbers } from '../Number/_Internal';
/** Ensure that **`O`** is a proper **`object`**, even is it has been mixed up.
 * Sometimes, we can end up with mixed up **`objects`** that do not make sense
 * visually (or that could at least be simplified for the end user). This will
 * turn anything that is passed to it into a cleaned up **`object`**.
 *
 * @param O
 * @returns **`object`**
 * @example
 * ```ts
 * ```
 */
export declare type Clean<O extends object> = number extends At<O, 'length'> ? [Exclude<keyof O, keyof any[] | Numbers['string']['+' | '0']>] extends [never] ? At<O, number>[] : O : Omit<O, keyof any[]>;
