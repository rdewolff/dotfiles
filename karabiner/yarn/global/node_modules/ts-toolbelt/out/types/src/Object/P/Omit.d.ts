import { IterationOf } from '../../Iteration/IterationOf';
import { Iteration } from '../../Iteration/Iteration';
import { Pos } from '../../Iteration/Pos';
import { Next } from '../../Iteration/Next';
import { Path as PPath } from './_Internal';
import { Index } from '../../Any/Index';
import { Omit as OOmit } from '../Omit';
import { LastIndex } from '../../Tuple/LastIndex';
import { Tuple } from '../../Tuple/Tuple';
declare type _Omit<O, Path extends Tuple<Index>, I extends Iteration = IterationOf<'0'>> = O extends object ? Pos<I> extends LastIndex<Path> ? OOmit<O, Path[Pos<I>]> : {
    [K in keyof O]: K extends Path[Pos<I>] ? _Omit<O[K], Path, Next<I>> : O[K];
} & {} : O;
/** Remove out of **`O`** the fields at **`Path`**
 * (⚠️ this type is expensive)
 * @param O to remove from
 * @param Path to be followed
 * @returns **`object`**
 * @example
 * ```ts
 * ```
 */
export declare type Omit<O extends object, Path extends PPath> = _Omit<O, Path>;
export {};
