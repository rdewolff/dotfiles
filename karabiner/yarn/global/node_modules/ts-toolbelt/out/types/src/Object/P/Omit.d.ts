import { IterationOf } from '../../Iteration/IterationOf';
import { Iteration } from '../../Iteration/Iteration';
import { Pos } from '../../Iteration/Pos';
import { Next } from '../../Iteration/Next';
import { Path as PPath } from './_Internal';
import { Index } from '../../Any/Index';
import { LastIndex } from '../../Tuple/LastIndex';
import { Tuple } from '../../Tuple/Tuple';
import { Select } from '../Select';
import { Key } from '../../Iteration/Key';
declare type _Omit<O extends object, Path extends Tuple<Index>, I extends Iteration = IterationOf<'0'>> = Select<{
    [K in keyof O]: O[K] extends infer Prop ? K extends Path[Pos<I>] ? Key<I> extends LastIndex<Path, 's'> ? never : Prop extends object ? _Omit<Prop, Path, Next<I>> : Prop : Prop : never;
}, any> & {};
/** Remove out of **`O`** the fields at **`Path`**
 * (⚠️ this type is expensive)
 * @param O to remove from
 * @param Path to be followed
 * @returns **`object`**
 * @example
 * ```ts
 * ```
 */
export declare type Omit<O extends object, Path extends PPath> = _Omit<O, Path>;
export {};
