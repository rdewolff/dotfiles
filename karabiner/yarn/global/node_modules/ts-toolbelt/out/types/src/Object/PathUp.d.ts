import { IterationOf } from '../Iteration/IterationOf';
import { Iteration } from '../Iteration/Iteration';
import { Next } from '../Iteration/Next';
import { Pos } from '../Iteration/Pos';
import { Length } from '../Tuple/Length';
import { At } from './At';
import { Cast } from '../Any/Cast';
import { NonNullable as UNonNullable } from '../Union/NonNullable';
import { Index } from '../Any/Index';
import { Tuple } from '../Tuple/Tuple';
declare type _PathUp<O, Path extends Tuple<Index>, I extends Iteration = IterationOf<'0'>> = {
    0: O extends unknown ? At<O & {}, Path[Pos<I>]> extends infer OK ? _PathUp<UNonNullable<OK>, Path, Next<I>> : never : never;
    1: O;
}[Pos<I> extends Length<Path> ? 1 : 0];
/** Get in **`O`** the type of nested properties.
 * It is able to deal with nested **`Union`**s.
 * @param O to be inspected
 * @param Path to be followed
 * @returns **`any`**
 * @example
 * ```ts
 * ```
 */
export declare type PathUp<O extends object, Path extends Tuple<Index>> = _PathUp<O, Path> extends infer X ? Cast<X, any> : never;
export {};
