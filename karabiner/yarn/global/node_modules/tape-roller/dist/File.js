"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const debug_1 = __importDefault(require("debug"));
const fs = __importStar(require("fs"));
const fs_1 = require("fs");
const util = __importStar(require("util"));
const Manipulator_1 = require("./Manipulator");
const rimraf_1 = __importDefault(require("rimraf"));
const util_1 = require("util");
const is_glob_1 = __importDefault(require("is-glob"));
const glob_1 = __importDefault(require("glob"));
const debug = debug_1.default('tape-roller:File');
class File {
    static async generate(source, destination, parameters = {}, options) {
        const file = await this.getFileTask(source, options);
        await file.replace(parameters).write(destination);
    }
    static async modify(fileName, pattern, modifier, options) {
        const file = await this.getFileTask(fileName, options);
        await file.modify(pattern, modifier).update();
    }
    static async getFileTask(source, options) {
        const asGlob = is_glob_1.default(source);
        debug(`Starting FileManager.generate as ${asGlob ? 'glob' : 'file'}.`);
        return asGlob ? await File.readGlob(source, options) : File.read(source);
    }
    static async move(from, to) {
        await util.promisify(fs.rename)(from, to);
    }
    static read(file, concatFileName = false, options) {
        return new Manipulator_1.Manipulator(file, concatFileName, options);
    }
    static async readGlob(pattern, options) {
        return File.read(await util_1.promisify(glob_1.default)(pattern, Object.assign({ nodir: true }, options)), true, options);
    }
    static async mkdir(path, recursive = true) {
        return await util.promisify(fs_1.mkdir)(path, { recursive });
    }
    static async copy(source, destination) {
        await File.read(source).write(destination);
    }
    static async remove(path, recursive = false) {
        if (recursive) {
            return await util.promisify(rimraf_1.default)(path);
        }
        await util.promisify(fs.unlink)(path);
    }
}
exports.File = File;
//# sourceMappingURL=File.js.map