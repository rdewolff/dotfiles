"use strict";
// This is the Ignite CLI extension. It gets parked on `toolbox.ignite` and each
// of the functions defined here are available as functions on that.
Object.defineProperty(exports, "__esModule", { value: true });
// bring in each of the constituents
var shell = require("shelljs");
var ignite_plugin_path_1 = require("./ignite/ignite-plugin-path");
var ignite_config_1 = require("./ignite/ignite-config");
var find_ignite_plugins_1 = require("./ignite/find-ignite-plugins");
var add_module_1 = require("./ignite/add-module");
var add_android_permission_1 = require("./ignite/add-android-permission");
var remove_module_1 = require("./ignite/remove-module");
var add_plugin_screen_examples_1 = require("./ignite/add-plugin-screen-examples");
var remove_plugin_screen_examples_1 = require("./ignite/remove-plugin-screen-examples");
var copy_batch_1 = require("./ignite/copy-batch");
var add_plugin_component_example_1 = require("./ignite/add-plugin-component-example");
var remove_plugin_component_example_1 = require("./ignite/remove-plugin-component-example");
var remove_android_permission_1 = require("./ignite/remove-android-permission");
var set_debug_config_1 = require("./ignite/set-debug-config");
var remove_debug_config_1 = require("./ignite/remove-debug-config");
var patch_in_file_1 = require("./ignite/patch-in-file");
var patching_1 = require("./ignite/patching");
var log_1 = require("./ignite/log");
var plugin_overrides_1 = require("./ignite/plugin-overrides");
/**
 * Adds ignite goodies
 */
module.exports = function (toolbox) {
    var parameters = toolbox.parameters;
    // determine which package manager to use
    var forceNpm = parameters.options.npm;
    // should we be using yarn?
    var useYarn = !forceNpm && Boolean(shell.which('yarn'));
    // the ignite plugin path
    var _a = ignite_plugin_path_1.default(toolbox), ignitePluginPath = _a.ignitePluginPath, setIgnitePluginPath = _a.setIgnitePluginPath;
    // a 4-pack of ignite config
    var _b = ignite_config_1.default(toolbox), loadIgniteConfig = _b.loadIgniteConfig, saveIgniteConfig = _b.saveIgniteConfig, setIgniteConfig = _b.setIgniteConfig, removeIgniteConfig = _b.removeIgniteConfig;
    // here's the extension's abilities
    toolbox.ignite = {
        ignitePluginPath: ignitePluginPath,
        setIgnitePluginPath: setIgnitePluginPath,
        useYarn: useYarn,
        loadIgniteConfig: loadIgniteConfig,
        saveIgniteConfig: saveIgniteConfig,
        setIgniteConfig: setIgniteConfig,
        removeIgniteConfig: removeIgniteConfig,
        findIgnitePlugins: find_ignite_plugins_1.default(toolbox),
        addModule: add_module_1.default(toolbox),
        addAndroidPermission: add_android_permission_1.default(toolbox),
        removeModule: remove_module_1.default(toolbox),
        copyBatch: copy_batch_1.default(toolbox),
        addPluginComponentExample: add_plugin_component_example_1.default(toolbox),
        removePluginComponentExample: remove_plugin_component_example_1.default(toolbox),
        addPluginScreenExamples: add_plugin_screen_examples_1.default(toolbox),
        removePluginScreenExamples: remove_plugin_screen_examples_1.default(toolbox),
        removeAndroidPermission: remove_android_permission_1.default(toolbox),
        setDebugConfig: set_debug_config_1.default(toolbox),
        removeDebugConfig: remove_debug_config_1.default(toolbox),
        patchInFile: patch_in_file_1.default(toolbox),
        log: log_1.default(toolbox),
        pluginOverrides: plugin_overrides_1.default(toolbox),
        patching: patching_1.default(toolbox),
        boilerplateName: function () { return loadIgniteConfig().boilerplate; },
        boilerplateVersion: function () { return loadIgniteConfig().boilerplateVersion; },
    };
};
//# sourceMappingURL=ignite.js.map