"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = (function (toolbox) {
    var fs = toolbox.filesystem;
    /**
     * Inserts a given bit of content to a given file at a matched location
     */
    var insertInFile = function (filePath, findPattern, content, insertAfter) {
        if (insertAfter === void 0) { insertAfter = true; }
        // read full file - Not a great idea if we ever touch large files
        var data = fs.read(filePath, 'utf8');
        var newContents = '';
        // get the full line of first occurance
        var finder = new RegExp(".*" + findPattern + ".*", '');
        var matches = data.match(finder);
        // Quick error check
        if (matches === null)
            throw new Error("'" + findPattern + "' was not found in file " + filePath + ".");
        if (insertAfter) {
            newContents = data.replace(finder, matches[0] + "\n" + content);
        }
        else {
            newContents = data.replace(finder, content + "\n" + matches[0]);
        }
        // overwrite file with modified contents
        fs.write(filePath, newContents);
    };
    var prependToFile = function (filePath, prependString) {
        var data = fs.read(filePath, 'utf8');
        fs.write(filePath, prependString + data);
    };
    /**
     * Replaces a given bit of matched content in a given file
     *
     * @param {string}  filePath     The path to the file we'll be modifying.
     * @param {string}  findPattern  The string that will be replaced.
     * @param {string}  content      The content to replace matched string in file.
     */
    var replaceInFile = function (filePath, findPattern, content) {
        // read full file - Not a great idea if we ever touch large files
        var data = fs.read(filePath, 'utf8');
        // get the full line of first occurance
        var finder = new RegExp(".*" + findPattern + ".*", '');
        var matches = data.match(finder);
        // Quick error check
        if (matches && matches.length > 0) {
            // replace contents
            var newContents = data.replace(finder, "" + content);
            // overwrite file with modified contents
            fs.write(filePath, newContents);
        }
        else {
            console.warn(findPattern + " not found");
        }
    };
    /**
     * Identifies if a string is in a particular file.
     *
     * @param  {string}  filePath     The path to the file we'll be scanning.
     * @param  {string}  findPattern  The string that identifies existence.
     * @return {boolean}              Boolean of success that findPattern was in file.
     */
    var isInFile = function (filePath, findPattern) {
        var data = fs.read(filePath, 'utf8');
        var finder = new RegExp(".*" + findPattern + ".*", '');
        return !!data.match(finder);
    };
    return {
        prependToFile: prependToFile,
        insertInFile: insertInFile,
        replaceInFile: replaceInFile,
        isInFile: isInFile,
    };
});
//# sourceMappingURL=patching.js.map