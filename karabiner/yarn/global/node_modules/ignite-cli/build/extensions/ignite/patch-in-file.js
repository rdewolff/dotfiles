"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = (function (toolbox) {
    var filesystem = toolbox.filesystem;
    /**
     * Conditionally places a string into a file before or after another string.
     *
     * @example
     *   patchInFile('thing.js', { before: 'bar', insert: 'foo' })
     *
     */
    function patchInFile(file, opts) {
        var ignite = toolbox.ignite;
        var data = filesystem.read(file, 'utf8');
        // If the file already has insert, no-op unless forced
        // stops accidental double inserts unless you're sure you want that
        if (data.includes(opts.insert) && !opts.force)
            return;
        // delete <string> is the same as replace <string> + insert ''
        var replaceString = opts.delete || opts.replace;
        var newString = opts.insert || '';
        if (replaceString) {
            if (data.includes(replaceString)) {
                // Replace matching string with new string
                var newContents = data.replace(replaceString, "" + newString);
                filesystem.write(file, newContents, { atomic: true });
            }
            else {
                console.warn(replaceString + " not found");
            }
        }
        else {
            // Insert before/after a particular string
            ignite.patching.insertInFile(file, opts.before || opts.after, newString, !!opts.after);
        }
    }
    return patchInFile;
});
//# sourceMappingURL=patch-in-file.js.map