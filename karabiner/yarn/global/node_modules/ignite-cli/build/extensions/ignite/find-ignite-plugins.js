"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = (function (toolbox) {
    // gluegun stuff
    var runtime = toolbox.runtime, filesystem = toolbox.filesystem;
    var sep = filesystem.separator;
    // how to identify ignite plugins
    var ignitePrefixed = function (p) { return p.name.startsWith('ignite-'); }; // propSatisfies(startsWith('ignite-'), 'name')
    var isInRightLocation = function (s) { return s.includes("ignite" + sep + "plugins"); }; // contains(`ignite${sep}plugins`)
    var inProjectPlugins = function (p) { return isInRightLocation(p.directory); }; // propSatisfies(isInRightLocation, 'directory')
    var onlyIgnitePlugins = function (plugins) { return plugins.filter(function (p) { return ignitePrefixed(p) || inProjectPlugins(p); }); }; // filter(anyPass([ignitePrefixed, inProjectPlugins]))
    var getIgnitePlugins = function (plugins) {
        return onlyIgnitePlugins(plugins).sort(function (a, b) { return (a.name < b.name ? -1 : 1); });
    }; // pipe(onlyIgnitePlugins, sortBy(prop('name'))
    /**
     * Finds the gluegun plugins that are also ignite plugins.  These are
     * plugins which have 1 of the following:
     *
     *   - the name starts with "ignite-"
     *   - the directory contains "ignite/plugins"
     *
     * @returns {Plugin[]} - an array of ignite plugins
     */
    return function () { return getIgnitePlugins(runtime.plugins); };
});
//# sourceMappingURL=find-ignite-plugins.js.map