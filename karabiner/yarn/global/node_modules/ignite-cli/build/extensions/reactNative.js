"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var ramda_1 = require("ramda");
var exit_codes_1 = require("../lib/exit-codes");
// DEPRECATED: Please specify React Native version when invoking install
// Example: const rnInstall = await reactNative.install({ name, version: '0.42.0' })
var REACT_NATIVE_VERSION = '0.58.0';
/**
 * Attach this extension to the toolbox.
 */
function attach(toolbox) {
    // fist-full o features
    var parameters = toolbox.parameters, print = toolbox.print, system = toolbox.system, filesystem = toolbox.filesystem, strings = toolbox.strings, ignite = toolbox.ignite;
    var log = ignite.log;
    /**
     * Installs React Native.
     */
    function install(opts) {
        if (opts === void 0) { opts = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var name, reactNativeVersion, reactNativeTemplate, perfStart, versionCheck, versionAvailable, rnOptions, cmd, withTemplate, spinner, stdioMode, e_1, fullTemplateName, perfDuration, successMessage;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        name = opts.name || parameters.first;
                        reactNativeVersion = opts.version || parameters.options['react-native-version'];
                        if (!reactNativeVersion) {
                            print.warning("\uD83D\uDCA9  unspecified react native version in ignite cli has been deprecated ");
                            print.warning("   please use version property in project's boilerplate file to set a react native version");
                            print.warning("   falling back to react native version: " + REACT_NATIVE_VERSION);
                            reactNativeVersion = REACT_NATIVE_VERSION;
                        }
                        reactNativeTemplate = opts.template || parameters.options['react-native-template'];
                        perfStart = new Date().getTime();
                        return [4 /*yield*/, system.run("npm info react-native@" + reactNativeVersion)];
                    case 1:
                        versionCheck = _a.sent();
                        versionAvailable = ramda_1.test(new RegExp(reactNativeVersion, ''), versionCheck || '');
                        if (!versionAvailable) {
                            print.error("\uD83D\uDCA9  react native version " + print.colors.yellow(reactNativeVersion) + " not found on NPM -- " + print.colors.yellow(REACT_NATIVE_VERSION) + " recommended");
                            return [2 /*return*/, {
                                    exitCode: exit_codes_1.default.REACT_NATIVE_VERSION,
                                    version: reactNativeVersion,
                                    template: reactNativeTemplate,
                                }];
                        }
                        rnOptions = ['--version', reactNativeVersion];
                        if (!strings.isBlank(reactNativeTemplate)) {
                            rnOptions.push('--template');
                            rnOptions.push(reactNativeTemplate);
                        }
                        if (opts.skipJest) {
                            rnOptions.push('--skip-jest');
                        }
                        if (opts.useNpm) {
                            rnOptions.push('--npm');
                        }
                        cmd = ramda_1.trim("react-native init " + name + " " + rnOptions.join(' '));
                        log('initializing react native');
                        log(cmd);
                        withTemplate = reactNativeTemplate ? " with " + print.colors.cyan(reactNativeTemplate) + " template" : '';
                        spinner = print.spin("adding " + print.colors.cyan('React Native ' + reactNativeVersion) + withTemplate + " " + print.colors.muted('(30 seconds-ish)'));
                        if (parameters.options.debug)
                            spinner.stop();
                        stdioMode = parameters.options.debug ? 'inherit' : 'ignore';
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, system.exec(cmd, { stdio: stdioMode })];
                    case 3:
                        _a.sent();
                        log('done');
                        return [3 /*break*/, 5];
                    case 4:
                        e_1 = _a.sent();
                        spinner.fail("failed to add " + print.colors.cyan('React Native ' + reactNativeVersion) + withTemplate);
                        if (reactNativeTemplate) {
                            fullTemplateName = "react-native-template-" + reactNativeTemplate;
                            spinner.fail("Does " + print.colors.cyan(fullTemplateName) + " exist on npm?");
                        }
                        return [2 /*return*/, {
                                exitCode: exit_codes_1.default.REACT_NATIVE_INSTALL,
                                version: reactNativeVersion,
                                template: reactNativeTemplate,
                            }];
                    case 5:
                        perfDuration = parseInt(((new Date().getTime() - perfStart) / 10).toString(), 10) / 100;
                        successMessage = "added " + print.colors.cyan('React Native ' + reactNativeVersion) + withTemplate + " in " + perfDuration + "s";
                        spinner.succeed(successMessage);
                        // jump immediately into the new directory
                        process.chdir(name);
                        log("changed to directory " + process.cwd());
                        // Create ./ignite/plugins/.gitkeep
                        filesystem.write(process.cwd() + "/ignite/plugins/.gitkeep", '');
                        return [2 /*return*/, {
                                exitCode: exit_codes_1.default.OK,
                                version: reactNativeVersion,
                                template: reactNativeTemplate,
                            }];
                }
            });
        });
    }
    toolbox.reactNative = { install: install };
}
module.exports = attach;
//# sourceMappingURL=reactNative.js.map