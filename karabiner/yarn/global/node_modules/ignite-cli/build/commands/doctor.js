"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var ramda_1 = require("ramda");
var os = require("os");
var isWindows = process.platform === 'win32';
var isMac = process.platform === 'darwin';
module.exports = {
    description: 'Checks your dev environment for dependencies.',
    run: function (toolbox) {
        return __awaiter(this, void 0, void 0, function () {
            var read, _a, run, which, _b, colors, info, table, padEnd, ignite, column1, column2, column3, platform, arch, cpus, firstCpu, cpu, cores, directory, nodePath, nodeVersion, _c, _d, npmPath, npmVersion, _e, yarnPath, yarnVersion, _f, rnPath, rnCli, _g, _h, _j, rnPkg, appReactNativeVersion, rnTable, ignitePath, igniteVersion, igniteJson, igniteTable, androidPath, javaPath, javaVersionCmd, javaVersion, _k, _l, _m, _o, xcodePath, xcodeVersion, _p, _q, _r;
            return __generator(this, function (_s) {
                switch (_s.label) {
                    case 0:
                        read = toolbox.filesystem.read, _a = toolbox.system, run = _a.run, which = _a.which, _b = toolbox.print, colors = _b.colors, info = _b.info, table = _b.table, padEnd = toolbox.strings.padEnd, ignite = toolbox.ignite;
                        column1 = function (label, length) {
                            if (length === void 0) { length = 16; }
                            return padEnd(label || '', length);
                        };
                        column2 = function (label) { return colors.yellow(padEnd(label || '-', 10)); };
                        column3 = function (label) { return colors.muted(label); };
                        platform = process.platform;
                        arch = os.arch();
                        cpus = os.cpus() || [];
                        firstCpu = ramda_1.head(cpus) || { model: undefined };
                        cpu = "" + firstCpu.model;
                        cores = cpus.length + " cores";
                        directory = "" + process.cwd();
                        info(colors.cyan('System'));
                        table([
                            [column1('platform'), column2(platform)],
                            [column1('arch'), column2(arch)],
                            [column1('cpu'), column2(cores), column3(cpu)],
                            [column1('directory'), column2(directory)],
                        ]);
                        nodePath = which('node');
                        _c = ramda_1.replace;
                        _d = ['v', ''];
                        return [4 /*yield*/, run('node --version', { trim: true })];
                    case 1:
                        nodeVersion = _c.apply(void 0, _d.concat([_s.sent()]));
                        npmPath = which('npm');
                        _e = npmPath;
                        if (!_e) return [3 /*break*/, 3];
                        return [4 /*yield*/, run('npm --version', { trim: true })];
                    case 2:
                        _e = (_s.sent());
                        _s.label = 3;
                    case 3:
                        npmVersion = _e;
                        yarnPath = which('yarn');
                        _f = yarnPath;
                        if (!_f) return [3 /*break*/, 5];
                        return [4 /*yield*/, run('yarn --version', { trim: true })];
                    case 4:
                        _f = (_s.sent());
                        _s.label = 5;
                    case 5:
                        yarnVersion = _f;
                        yarnPath = yarnPath || 'not installed';
                        info('');
                        info(colors.cyan('JavaScript'));
                        table([
                            [column1('node'), column2(nodeVersion), column3(nodePath)],
                            [column1('npm'), column2(npmVersion), column3(npmPath)],
                            [column1('yarn'), column2(yarnVersion), column3(yarnPath)],
                        ]);
                        rnPath = which('react-native');
                        _g = rnPath;
                        if (!_g) return [3 /*break*/, 7];
                        _h = ramda_1.split;
                        _j = [/\s/];
                        return [4 /*yield*/, run('react-native --version', { trim: true })];
                    case 6:
                        _g = _h.apply(void 0, _j.concat([_s.sent()]))[1]; // lulz
                        _s.label = 7;
                    case 7:
                        rnCli = _g;
                        rnPkg = read(process.cwd() + "/node_modules/react-native/package.json", 'json');
                        appReactNativeVersion = rnPkg && rnPkg.version;
                        info('');
                        info(colors.cyan('React Native'));
                        rnTable = [];
                        rnTable.push([column1('react-native-cli'), column2(rnCli)]);
                        if (appReactNativeVersion) {
                            rnTable.push([column1('app rn version'), column2(appReactNativeVersion)]);
                        }
                        table(rnTable);
                        ignitePath = which('ignite');
                        return [4 /*yield*/, run('ignite version', { trim: true })];
                    case 8:
                        igniteVersion = _s.sent();
                        igniteJson = ignite.loadIgniteConfig();
                        info('');
                        info(colors.cyan('Ignite'));
                        igniteTable = [];
                        igniteTable.push([column1('ignite-cli'), column2(igniteVersion), column3(ignitePath)]);
                        if (igniteJson) {
                            Object.keys(igniteJson).forEach(function (k) {
                                var v = typeof igniteJson[k] === 'object' ? JSON.stringify(igniteJson[k]) : igniteJson[k];
                                igniteTable.push([column1(k), column2(v), column3('')]);
                            });
                        }
                        table(igniteTable);
                        androidPath = process.env['ANDROID_HOME'];
                        javaPath = which('java');
                        javaVersionCmd = isWindows ? 'java -version' : 'java -version 2>&1';
                        _k = javaPath;
                        if (!_k) return [3 /*break*/, 10];
                        _l = ramda_1.last;
                        _m = ramda_1.match;
                        _o = [/"(.*)"/];
                        return [4 /*yield*/, run(javaVersionCmd)];
                    case 9:
                        _k = _l.apply(void 0, [_m.apply(void 0, _o.concat([_s.sent()]))]);
                        _s.label = 10;
                    case 10:
                        javaVersion = _k;
                        info('');
                        info(colors.cyan('Android'));
                        table([
                            [column1('java'), column2(javaVersion), column3(javaPath)],
                            [column1('android home'), column2('-'), column3(androidPath)],
                        ]);
                        if (!isMac) return [3 /*break*/, 13];
                        xcodePath = which('xcodebuild');
                        _p = xcodePath;
                        if (!_p) return [3 /*break*/, 12];
                        _q = ramda_1.split;
                        _r = [/\s/];
                        return [4 /*yield*/, run('xcodebuild -version', { trim: true })];
                    case 11:
                        _p = _q.apply(void 0, _r.concat([_s.sent()]))[1]; // lulz
                        _s.label = 12;
                    case 12:
                        xcodeVersion = _p;
                        info('');
                        info(colors.cyan('iOS'));
                        table([[column1('xcode'), column2(xcodeVersion)]]);
                        _s.label = 13;
                    case 13:
                        // -=-=-=- windows -=-=-=-
                        // TODO: what can we check on Windows?
                        if (isWindows) {
                            // info('')
                            // info(colors.cyan('Windows'))
                            // table([])
                        }
                        return [2 /*return*/];
                }
            });
        });
    },
};
//# sourceMappingURL=doctor.js.map