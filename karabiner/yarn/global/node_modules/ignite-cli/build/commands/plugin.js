"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var exit_codes_1 = require("../lib/exit-codes");
var validate_name_1 = require("../lib/validate-name");
/**
 * Does a walkthrough of questions and returns the answers as an object.
 *
 * @param {Object} toolbox The gluegun toolbox.
 * @returns {Object} The answers.
 */
var walkthrough = function (toolbox) { return __awaiter(_this, void 0, void 0, function () {
    var minOptions, maxOptions;
    return __generator(this, function (_a) {
        minOptions = { boilerplate: 'No', generator: 'No' };
        maxOptions = { boilerplate: 'Yes', generator: 'Yes' };
        if (toolbox.parameters.options.min) {
            return [2 /*return*/, minOptions];
        }
        if (toolbox.parameters.options.max) {
            return [2 /*return*/, maxOptions];
        }
        // Okay, we'll ask one by one, fine
        return [2 /*return*/, toolbox.prompt.ask([
                {
                    name: 'boilerplate',
                    message: 'Is this an app boilerplate plugin?',
                    type: 'list',
                    choices: ['No', 'Yes'],
                },
                {
                    name: 'generator',
                    message: 'Will your plugin have a generator command? (e.g. ignite generate <mygenerator> <name>)',
                    type: 'list',
                    choices: ['No', 'Yes'],
                },
            ])];
    });
}); };
/**
 * Creates a new folder with the plugin files.
 *
 * @param {Object} toolbox The gluegun toolbox.
 */
var createNewPlugin = function (toolbox) { return __awaiter(_this, void 0, void 0, function () {
    var parameters, print, ignite, strings, meta, pluginName, name, answers, copyJobs;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                parameters = toolbox.parameters, print = toolbox.print, ignite = toolbox.ignite, strings = toolbox.strings, meta = toolbox.meta;
                pluginName = validate_name_1.default(parameters.second, toolbox);
                name = strings.pascalCase(pluginName.replace(/^ignite-/, ''));
                return [4 /*yield*/, walkthrough(toolbox)
                    // Here we go!
                ];
            case 1:
                answers = _a.sent();
                // Here we go!
                print.info("Creating new plugin: " + pluginName);
                copyJobs = [
                    { template: 'plugin/gitignore', target: pluginName + "/.gitignore" },
                    { template: 'plugin/plugin.js.ejs', target: pluginName + "/plugin.js" },
                    { template: 'plugin/ignite.json.ejs', target: pluginName + "/ignite.json" },
                    { template: 'plugin/package.json.ejs', target: pluginName + "/package.json" },
                    { template: 'plugin/README.md', target: pluginName + "/README.md" },
                    { template: 'plugin/test/add.js.ejs', target: pluginName + "/test/add.js" },
                    { template: 'plugin/test/remove.js.ejs', target: pluginName + "/test/remove.js" },
                    { template: 'plugin/test/interface.js.ejs', target: pluginName + "/test/interface.js" },
                    // generator command template example
                    answers.generator === 'Yes' && {
                        template: 'plugin/commands/thing.js.ejs',
                        target: pluginName + "/commands/generate/" + pluginName + ".js",
                    },
                    answers.generator === 'Yes' && {
                        template: 'plugin/templates/thing.js.ejs.ejs',
                        target: pluginName + "/templates/" + pluginName + ".js.ejs",
                    },
                ];
                if (answers.boilerplate === 'Yes') {
                    copyJobs.push({ template: 'plugin/boilerplate.js.ejs', target: pluginName + "/boilerplate.js" });
                    copyJobs.push({ template: 'plugin/boilerplate/index.js.ejs.ejs', target: pluginName + "/boilerplate/index.js.ejs" });
                    copyJobs.push({ template: 'plugin/boilerplate/app/app.js', target: pluginName + "/boilerplate/app/app.js" });
                    copyJobs.push({
                        template: 'plugin/boilerplate/tests/app.test.js',
                        target: pluginName + "/boilerplate/tests/app.test.js",
                    });
                }
                // copy over the files
                return [4 /*yield*/, ignite.copyBatch(toolbox, copyJobs, {
                        name: name,
                        pluginName: pluginName,
                        answers: answers,
                        igniteVersion: meta.version(),
                        isGenerator: answers.generator === 'Yes',
                    })];
            case 2:
                // copy over the files
                _a.sent();
                return [2 /*return*/];
        }
    });
}); };
/**
 * Shows the command help.
 *
 * @param {Object} toolbox The gluegun toolbox.
 */
var showHelp = function (toolbox) {
    var instructions = "\nGenerates an Ignite CLI-compatible plugin in the current folder.\nGenerally, you would run this from ./YourApp/ignite/plugins/\n\nCommands:\n  ignite plugin help\n  ignite plugin new <your-plugin>\n\nExample:\n  ignite plugin new ignite-mobx";
    toolbox.print.info(instructions);
    process.exit(exit_codes_1.default.OK);
};
module.exports = {
    alias: ['p'],
    description: 'Manages ignite plugins',
    run: function (toolbox) {
        return __awaiter(this, void 0, void 0, function () {
            var parameters, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        parameters = toolbox.parameters;
                        _a = parameters.first;
                        switch (_a) {
                            case 'new': return [3 /*break*/, 1];
                            case 'help': return [3 /*break*/, 3];
                        }
                        return [3 /*break*/, 3];
                    case 1: return [4 /*yield*/, createNewPlugin(toolbox)];
                    case 2:
                        _b.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        showHelp(toolbox);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    },
};
//# sourceMappingURL=plugin.js.map