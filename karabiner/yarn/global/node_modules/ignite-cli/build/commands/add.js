"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var R = require("ramda");
var detected_changes_1 = require("../lib/detected-changes");
var detect_install_1 = require("../lib/detect-install");
var import_plugin_1 = require("../lib/import-plugin");
var find_plugin_file_1 = require("../lib/find-plugin-file");
var exit_codes_1 = require("../lib/exit-codes");
/**
 * Removes the ignite plugin.
 */
var rollbackFailedIgnitePlugin = function (moduleName, toolbox) { return __awaiter(_this, void 0, void 0, function () {
    var print, system, ignite;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                print = toolbox.print, system = toolbox.system, ignite = toolbox.ignite;
                print.warning('Rolling back...run with --debug to see more info');
                if (!ignite.useYarn) return [3 /*break*/, 2];
                return [4 /*yield*/, system.run("yarn remove " + moduleName + " --dev")];
            case 1:
                _a.sent();
                return [3 /*break*/, 4];
            case 2: return [4 /*yield*/, system.run("npm rm " + moduleName + " --save-dev")];
            case 3:
                _a.sent();
                _a.label = 4;
            case 4: return [2 /*return*/];
        }
    });
}); };
module.exports = {
    description: 'Adds a plugin to your Ignited project',
    alias: ['a'],
    run: function (toolbox) {
        return __awaiter(this, void 0, void 0, function () {
            var print, filesystem, prompt, ignite, parameters, strings, log, perfStart, config, currentGenerators, instructions, specs, moduleName, modulePath, spinner, exitCode, ignitePluginConfigPath, newConfig, proposedGenerators, changes, ok, pluginFile, pluginModule, combinedGenerators, updatedConfig, perfDuration, err_1, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        print = toolbox.print, filesystem = toolbox.filesystem, prompt = toolbox.prompt, ignite = toolbox.ignite, parameters = toolbox.parameters, strings = toolbox.strings;
                        log = ignite.log;
                        perfStart = new Date().getTime();
                        log('running add command');
                        config = ignite.loadIgniteConfig();
                        currentGenerators = config.generators || {};
                        // the thing we're trying to install
                        if (strings.isBlank(parameters.first)) {
                            instructions = "An ignite plugin is required.\n\nExamples:\n  ignite add i18n\n  ignite add vector-icons\n  ignite add maps\n  ignite add gantman/ignite-react-native-config\n  ignite add /path/to/plugin/you/are/building";
                            print.info(instructions);
                            process.exit(exit_codes_1.default.OK);
                        }
                        specs = detect_install_1.default(parameters.first, toolbox);
                        moduleName = specs.moduleName;
                        modulePath = process.cwd() + "/node_modules/" + moduleName;
                        log("installing " + modulePath + " from source " + specs.type);
                        spinner = print.spin('');
                        return [4 /*yield*/, import_plugin_1.default(toolbox, specs)];
                    case 1:
                        exitCode = _a.sent();
                        if (exitCode) {
                            spinner.stop();
                            process.exit(exitCode);
                        }
                        ignitePluginConfigPath = modulePath + "/ignite.json";
                        newConfig = filesystem.exists(ignitePluginConfigPath)
                            ? filesystem.read(ignitePluginConfigPath, 'json')
                            : {};
                        proposedGenerators = (newConfig.generators || []).reduce(function (acc, k) {
                            acc[k] = moduleName;
                            return acc;
                        }, {});
                        changes = detected_changes_1.default(currentGenerators, proposedGenerators);
                        if (!(changes.length > 0)) return [3 /*break*/, 5];
                        spinner.stop();
                        // we warn the user on changes
                        print.warning("\uD83D\uDD25  The following generators would be changed: " + R.join(', ', changes));
                        return [4 /*yield*/, prompt.confirm('You ok with that?')
                            // if they refuse, then npm/yarn uninstall
                        ];
                    case 2:
                        ok = _a.sent();
                        if (!!ok) return [3 /*break*/, 4];
                        return [4 /*yield*/, rollbackFailedIgnitePlugin(moduleName, toolbox)];
                    case 3:
                        _a.sent();
                        process.exit(exit_codes_1.default.OK);
                        _a.label = 4;
                    case 4:
                        spinner.text = "adding " + print.colors.cyan(moduleName);
                        spinner.start();
                        _a.label = 5;
                    case 5:
                        _a.trys.push([5, 12, , 14]);
                        pluginFile = find_plugin_file_1.default(toolbox, modulePath);
                        if (!pluginFile) return [3 /*break*/, 10];
                        // bring the ignite plugin to life
                        log("requiring ignite plugin from " + modulePath);
                        pluginModule = require(pluginFile);
                        if (!pluginModule.hasOwnProperty('add') || !pluginModule.hasOwnProperty('remove')) {
                            spinner.fail("'add' or 'remove' method missing.");
                            process.exit(exit_codes_1.default.PLUGIN_INVALID);
                        }
                        // set the path to the current running ignite plugin
                        ignite.setIgnitePluginPath(modulePath);
                        _a.label = 6;
                    case 6:
                        _a.trys.push([6, 8, , 9]);
                        // save new ignite config if something changed
                        if (proposedGenerators !== {}) {
                            combinedGenerators = Object.assign({}, currentGenerators, proposedGenerators);
                            updatedConfig = R.assoc('generators', combinedGenerators, ignite.loadIgniteConfig());
                            ignite.saveIgniteConfig(updatedConfig);
                        }
                        spinner.stop();
                        log("running add() on ignite plugin");
                        return [4 /*yield*/, pluginModule.add(toolbox)];
                    case 7:
                        _a.sent();
                        perfDuration = parseInt(((new Date().getTime() - perfStart) / 10).toString(), 10) / 100;
                        spinner.text = "added " + print.colors.cyan(moduleName) + " in " + perfDuration + "s";
                        spinner.start();
                        spinner.succeed();
                        // Sweet! We did it!
                        return [2 /*return*/, exit_codes_1.default.OK];
                    case 8:
                        err_1 = _a.sent();
                        // it's up to the throwers of this error to ensure the error message is human friendly.
                        // to do this, we need to ensure all our core features like `addModule`, `addPluginComponentExample`, etc
                        // all play along nicely.
                        spinner.fail(err_1.message);
                        process.exit(exit_codes_1.default.PLUGIN_INSTALL);
                        return [3 /*break*/, 9];
                    case 9: return [3 /*break*/, 11];
                    case 10:
                        spinner.fail(modulePath + "/plugin.js does not exist.  skipping.");
                        spinner.stop();
                        _a.label = 11;
                    case 11: return [3 /*break*/, 14];
                    case 12:
                        err_2 = _a.sent();
                        // we couldn't require the plugin, it probably has some nasty js!
                        spinner.fail('problem loading the plugin JS');
                        return [4 /*yield*/, rollbackFailedIgnitePlugin(moduleName, toolbox)];
                    case 13:
                        _a.sent();
                        log(err_2);
                        process.exit(exit_codes_1.default.PLUGIN_INVALID);
                        return [3 /*break*/, 14];
                    case 14: return [2 /*return*/];
                }
            });
        });
    },
};
//# sourceMappingURL=add.js.map