"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var shelljs_1 = require("shelljs");
var ramda_1 = require("ramda");
var prepend_ignite_1 = require("../lib/prepend-ignite");
var find_plugin_file_1 = require("../lib/find-plugin-file");
var exit_codes_1 = require("../lib/exit-codes");
var path = require("path");
// use yarn or use npm? hardcode for now
var useYarn = false;
var detectRemovals = function (configObject, moduleName) {
    return Object.keys(configObject).reduce(function (acc, k) {
        if (configObject[k] === moduleName) {
            return ramda_1.concat(["" + k], acc);
        }
        return acc;
    }, []);
};
var existsLocally = function (moduleName) {
    // we take a look at the local package.json
    var pack = require(process.cwd() + "/package.json");
    return ramda_1.pathOr(null, ['devDependencies', moduleName], pack);
};
var removeDependency = function (moduleName) {
    console.warn('Removing dev module');
    if (useYarn) {
        shelljs_1.default.exec("yarn remove " + moduleName, { silent: true });
    }
    else {
        shelljs_1.default.exec("npm rm " + moduleName + " --save-dev", { silent: true });
    }
};
module.exports = {
    alias: ['r'],
    description: 'Removes an Ignite CLI plugin.',
    run: function (toolbox) {
        return __awaiter(this, void 0, void 0, function () {
            var print, parameters, prompt, ignite, info, warning, xmark, error, success, options, moduleParam, isScoped, moduleName, config, changes, ok, generatorsList_1, updatedConfig, modulePath, pluginFile, pluginModule, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        print = toolbox.print, parameters = toolbox.parameters, prompt = toolbox.prompt, ignite = toolbox.ignite;
                        info = print.info, warning = print.warning, xmark = print.xmark, error = print.error, success = print.success;
                        options = parameters.options;
                        moduleParam = parameters.array.pop();
                        isScoped = moduleParam.startsWith('@');
                        // Check if they used a directory path instead of a plugin name
                        if (moduleParam.includes(path.sep) && !isScoped) {
                            error("\uD83D\uDCA9 When removing a package, you shouldn't use a path.\n    Try " + toolbox.print.colors.highlight("ignite remove " + moduleParam.split(path.sep).pop()) + " instead.");
                            process.exit(exit_codes_1.default.PLUGIN_NAME);
                        }
                        moduleName = moduleParam;
                        if (!isScoped) {
                            moduleName = prepend_ignite_1.default(moduleParam);
                        }
                        info("\uD83D\uDD0E    Verifying Plugin");
                        if (!existsLocally(moduleName)) return [3 /*break*/, 11];
                        config = ignite.loadIgniteConfig();
                        changes = detectRemovals(config.generators, moduleName);
                        if (!(changes.length > 0)) return [3 /*break*/, 4];
                        ok = void 0;
                        if (!(options.y || options.yes || options.confirm)) return [3 /*break*/, 1];
                        ok = true;
                        return [3 /*break*/, 3];
                    case 1:
                        warning("The following generators would be removed: " + ramda_1.join(', ', changes));
                        return [4 /*yield*/, prompt.confirm('You ok with that?')];
                    case 2:
                        ok = _a.sent();
                        _a.label = 3;
                    case 3:
                        if (ok) {
                            generatorsList_1 = Object.assign({}, config.generators);
                            ramda_1.map(function (k) { return delete generatorsList_1[k]; }, changes);
                            updatedConfig = ramda_1.assoc('generators', generatorsList_1, config);
                            ignite.saveIgniteConfig(updatedConfig);
                        }
                        else {
                            process.exit(exit_codes_1.default.GENERIC);
                        }
                        _a.label = 4;
                    case 4:
                        modulePath = process.cwd() + "/node_modules/" + moduleName;
                        pluginFile = find_plugin_file_1.default(toolbox, modulePath);
                        if (!pluginFile) return [3 /*break*/, 10];
                        pluginModule = require(pluginFile);
                        // set the path to the current running ignite plugin
                        ignite.setIgnitePluginPath(modulePath);
                        if (!pluginModule.hasOwnProperty('remove')) return [3 /*break*/, 9];
                        _a.label = 5;
                    case 5:
                        _a.trys.push([5, 7, , 8]);
                        return [4 /*yield*/, pluginModule.remove(toolbox)];
                    case 6:
                        _a.sent();
                        return [3 /*break*/, 8];
                    case 7:
                        e_1 = _a.sent();
                        ignite.log(e_1);
                        process.exit(exit_codes_1.default.GENERIC);
                        return [3 /*break*/, 8];
                    case 8: return [3 /*break*/, 10];
                    case 9:
                        error("\uD83D\uDCA9  'remove' method missing.");
                        process.exit(exit_codes_1.default.PLUGIN_INVALID);
                        _a.label = 10;
                    case 10:
                        // Uninstall dep from node modules
                        removeDependency(moduleName);
                        success(xmark + "    Removed");
                        return [3 /*break*/, 12];
                    case 11:
                        error("ðŸ’©  We couldn't find that ignite plugin");
                        warning("Please make sure " + moduleName + " exists in package.json");
                        process.exit(1);
                        _a.label = 12;
                    case 12: return [2 /*return*/];
                }
            });
        });
    },
};
//# sourceMappingURL=remove.js.map