"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var exit_codes_1 = require("../lib/exit-codes");
var is_ignite_directory_1 = require("../lib/is-ignite-directory");
module.exports = {
    description: 'Copy templates as blueprints for this project',
    run: function (context) {
        return __awaiter(this, void 0, void 0, function () {
            var print, filesystem, parameters, warning, success, info, pluginOptions, selectedPlugin, answer, directory, choices, copyFiles;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // ensure we're in a supported directory
                        if (!is_ignite_directory_1.default(process.cwd())) {
                            context.print.error('The `ignite spork` command must be run in an ignite-compatible directory.');
                            process.exit(exit_codes_1.default.NOT_IGNITE_PROJECT);
                        }
                        print = context.print, filesystem = context.filesystem, parameters = context.parameters;
                        warning = print.warning, success = print.success, info = print.info;
                        pluginOptions = context.ignite.findIgnitePlugins().reduce(function (a, k) {
                            var jsonFile = k.directory + "/ignite.json";
                            if (filesystem.exists(jsonFile)) {
                                var jsonContents = filesystem.read(jsonFile, 'json') || {};
                                if (jsonContents.generators) {
                                    a.push(k.name);
                                }
                            }
                            return a;
                        }, []);
                        selectedPlugin = '';
                        if (!(pluginOptions.length === 0)) return [3 /*break*/, 1];
                        warning('No plugins with generators were detected!');
                        process.exit(exit_codes_1.default.SPORKABLES_NOT_FOUND);
                        return [3 /*break*/, 4];
                    case 1:
                        if (!(pluginOptions.length === 1)) return [3 /*break*/, 2];
                        selectedPlugin = pluginOptions[0];
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, context.prompt.ask({
                            name: 'selectedPlugin',
                            message: 'Which plugin will you be sporking templates from?',
                            type: 'list',
                            choices: pluginOptions,
                        })];
                    case 3:
                        answer = _a.sent();
                        selectedPlugin = answer.selectedPlugin;
                        _a.label = 4;
                    case 4:
                        directory = context.ignite.findIgnitePlugins().find(function (x) { return x.name === selectedPlugin; }).directory;
                        choices = filesystem.list(directory + "/templates");
                        if (!parameters.first) return [3 /*break*/, 5];
                        if (choices.includes(parameters.first)) {
                            copyFiles = { selectedTemplates: [parameters.first] };
                        }
                        else {
                            warning(parameters.first + " is not a recognized generator template.");
                            process.exit(exit_codes_1.default.SPORKABLES_NOT_FOUND);
                        }
                        return [3 /*break*/, 7];
                    case 5: return [4 /*yield*/, context.prompt.ask({
                            name: 'selectedTemplates',
                            message: 'Which templates would you like to spork?',
                            type: 'multiselect',
                            choices: choices,
                        })];
                    case 6:
                        copyFiles = _a.sent();
                        _a.label = 7;
                    case 7:
                        // TODO: This will be wonky if you're not in root of your project
                        copyFiles.selectedTemplates.map(function (template) {
                            var destination = "ignite/Spork/" + selectedPlugin + "/" + template;
                            filesystem.copyAsync(directory + "/templates/" + template, destination);
                            info(" \uD83D\uDD18 " + destination);
                        });
                        success('Sporked!');
                        return [2 /*return*/];
                }
            });
        });
    },
};
//# sourceMappingURL=spork.js.map