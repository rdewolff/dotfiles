"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var ramda_1 = require("ramda");
/**
 * Displays information about what generators are available.
 */
module.exports = {
    description: 'Generates some files.',
    alias: ['g'],
    run: function (toolbox) {
        return __awaiter(this, void 0, void 0, function () {
            var print, runtime, newline, warning, info, table, _a, bold, yellow, muted, white, generatorCommands, footer, data;
            return __generator(this, function (_b) {
                print = toolbox.print, runtime = toolbox.runtime;
                newline = print.newline, warning = print.warning, info = print.info, table = print.table, _a = print.colors, bold = _a.bold, yellow = _a.yellow, muted = _a.muted, white = _a.white;
                generatorCommands = runtime.commands
                    .filter(function (cmd) { return cmd.commandPath.length > 1 && cmd.commandPath[0] === 'generate'; })
                    .sort(function (a, b) { return (a.commandPath.join(' ') < b.commandPath.join(' ') ? -1 : 1); });
                newline();
                footer = function () {
                    newline();
                    info(muted('  --------------------------------------------------------------------------'));
                    info(muted("  Check out " + white('https://github.com/infinitered/ignite') + " for more information")); // prettier-ignore
                    info(muted('  or join our Slack community at http://community.infinite.red.'));
                };
                // Avast! Thar be no generators ripe for tha plunder.
                if (generatorCommands.length === 0) {
                    warning('⚠️  No generators detected.\n');
                    info("  " + bold('Generators') + " allow you to quickly make frequently created files such as:\n");
                    info("    * components");
                    info("    * screens");
                    info("    * models");
                    info("    * and more");
                    footer();
                    return [2 /*return*/];
                }
                // print out all the generators
                info("\u2728 Type " + bold('ignite generate') + " " + yellow('________') + " to run one of these generators:\n");
                data = ramda_1.pipe(ramda_1.values, ramda_1.map(function (item) { return [yellow(item.name), item.description, muted(item.plugin.name)]; }))(generatorCommands);
                // and print it
                table(data);
                footer();
                return [2 /*return*/];
            });
        });
    },
};
//# sourceMappingURL=generate.js.map