"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var prepend_ignite_1 = require("./prepend-ignite");
var package_extract_1 = require("./package-extract");
var path = require("path");
/**
 * Detects the type of install the user is requesting for this plugin.
 *
 * We check 3 different things:
 *
 *   1. a plugin which exists in one of the plugin override paths
 *   2. a plugin which lives in a relative or absolute path
 *   3. otherwise let npm hook us up
 */
function detectInstall(plugin, toolbox) {
    // grab some gluegun goodies
    var filesystem = toolbox.filesystem, ignite = toolbox.ignite;
    var sep = path.sep; // why isn't filesystem.separator working here?
    // grab the plugin overrides
    var pluginOverrides = (ignite && ignite.pluginOverrides) || [];
    /**
     * Is this a valid ignite plugin?
     *
     * @param  {string} candidate - The potential directory to check.
     * @return {boolean}          - True if this is valid; otherwise false.
     */
    function isValidIgnitePluginDirectory(candidate) {
        var isDir = filesystem.exists(candidate) === 'dir';
        var packageIsFile = filesystem.exists("" + candidate + sep + "package.json") === 'file';
        return isDir && packageIsFile;
    }
    // Normalize package name
    var packageName = plugin;
    var packageVersion = undefined;
    // Check if referring to a path
    if (['~', '.', '\\', '/'].includes(plugin[0])) {
        // verify that the path exists and has a `package.json`
        var packagePath = filesystem.path(plugin, 'package.json');
        var packageExists = filesystem.exists(packagePath);
        if (packageExists) {
            packageName = filesystem.path(packageName);
        }
        else {
            throw new Error("Couldn't find package at " + packagePath + ". Check path and try again.");
        }
    }
    else {
        // extract the package name and (optionally) version
        var _a = package_extract_1.default(plugin), name = _a.name, scoped = _a.scoped, version = _a.version;
        packageName = scoped ? name : prepend_ignite_1.default(name);
        packageVersion = version;
    }
    // do we have overrides?
    if (pluginOverrides.length > 0) {
        // look for the plugin into one of our override paths
        var foundPath = pluginOverrides.find(function (overridePath) {
            return isValidIgnitePluginDirectory("" + overridePath + sep + packageName);
        });
        // did we find it?
        if (foundPath) {
            var path_1 = foundPath + "/" + packageName;
            return {
                directory: path_1,
                override: true,
                moduleName: filesystem.read(path_1 + "/package.json", 'json').name,
                type: 'directory',
            };
        }
    }
    // is this a directory?
    if (isValidIgnitePluginDirectory(packageName)) {
        var json = filesystem.read(packageName + "/package.json", 'json') || {};
        return {
            directory: packageName,
            moduleName: json.name,
            type: 'directory',
        };
    }
    // the default is to assume that npm can figure out where to get this
    return {
        moduleName: packageName,
        version: packageVersion,
        type: 'npm',
    };
}
exports.default = detectInstall;
//# sourceMappingURL=detect-install.js.map