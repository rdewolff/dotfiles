"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var exit_codes_1 = require("../lib/exit-codes");
/**
 * Install this module.
 */
function importPlugin(toolbox, opts) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, isEmpty, forEach, trim, moduleName, version, type, directory, ignite, system, filesystem, log, isDirectory, target, packageVersion, json, _b, _c, e_1, boom, rawCacheDir_1, dirs, cmd, cacheBusting, cmd;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    _a = require('ramda'), isEmpty = _a.isEmpty, forEach = _a.forEach, trim = _a.trim;
                    moduleName = opts.moduleName, version = opts.version, type = opts.type, directory = opts.directory;
                    ignite = toolbox.ignite, system = toolbox.system, filesystem = toolbox.filesystem;
                    log = ignite.log;
                    isDirectory = type === 'directory';
                    target = isDirectory ? directory : moduleName;
                    packageVersion = version && !isDirectory ? "@" + version : '';
                    if (!(type === 'npm')) return [3 /*break*/, 4];
                    _d.label = 1;
                case 1:
                    _d.trys.push([1, 3, , 4]);
                    _c = (_b = JSON).parse;
                    return [4 /*yield*/, system.run("npm info " + target + packageVersion + " --json")];
                case 2:
                    json = _c.apply(_b, [_d.sent()]);
                    log(json.name + " " + json.version + " on npm.");
                    return [3 /*break*/, 4];
                case 3:
                    e_1 = _d.sent();
                    log("unable to find " + target + " on npm");
                    boom = new Error(e_1.message);
                    boom.unavailable = true;
                    boom.name = target;
                    throw boom;
                case 4:
                    if (!ignite.useYarn) return [3 /*break*/, 8];
                    if (!isDirectory) return [3 /*break*/, 6];
                    // where is the yarn cache?
                    log("checking for yarn cache");
                    return [4 /*yield*/, system.exec('yarn cache dir')
                        // look for a cached version of this
                    ];
                case 5:
                    rawCacheDir_1 = _d.sent();
                    dirs = filesystem.cwd(rawCacheDir_1).find({
                        matching: "npm-" + moduleName + "-*",
                        directories: true,
                        recursive: false,
                    });
                    // clear existing cache if we have one
                    if (!isEmpty(dirs)) {
                        forEach(function (dir) {
                            log("removing yarn cache " + rawCacheDir_1 + "/" + dir);
                            filesystem.remove(rawCacheDir_1 + "/" + dir);
                        }, dirs);
                    }
                    _d.label = 6;
                case 6:
                    cmd = isDirectory ? "yarn add file:" + target + " --force --dev" : "yarn add " + target + packageVersion + " --dev";
                    log(cmd);
                    return [4 /*yield*/, system.run(cmd)];
                case 7:
                    _d.sent();
                    log('finished yarn command');
                    return [3 /*break*/, 10];
                case 8:
                    cacheBusting = isDirectory ? '--cache-min=0' : '';
                    cmd = trim("npm i " + target + packageVersion + " --save-dev " + cacheBusting);
                    log(cmd);
                    return [4 /*yield*/, system.run(cmd)];
                case 9:
                    _d.sent();
                    log('finished npm command');
                    _d.label = 10;
                case 10: return [2 /*return*/];
            }
        });
    });
}
/**
 * This does everything around the periphery of importing a plugin such
 * as UI and safety checks.
 */
exports.default = (function (toolbox, specs) { return __awaiter(_this, void 0, void 0, function () {
    var moduleName, print, ignite, log, spinner, e_2;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                moduleName = specs.moduleName;
                print = toolbox.print, ignite = toolbox.ignite;
                log = ignite.log;
                spinner = print.spin("adding " + print.colors.cyan(moduleName));
                if (!specs.type) return [3 /*break*/, 5];
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4 /*yield*/, importPlugin(toolbox, specs)];
            case 2:
                _a.sent();
                return [3 /*break*/, 4];
            case 3:
                e_2 = _a.sent();
                if (e_2.unavailable) {
                    log(e_2.message);
                    spinner.fail(print.colors.bold(moduleName) + " is not available on npm.");
                    print.info('');
                    print.info(print.colors.muted('-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-'));
                    print.error('  We also searched in these directories:\n');
                    ignite.pluginOverrides.forEach(function (dir) {
                        print.info("    \u25B8 " + dir);
                    });
                    print.info(print.colors.muted('-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-'));
                }
                else {
                    spinner.fail(print.colors.red(moduleName) + " was not able to be installed. Is it a valid NPM module?");
                    print.error('----------');
                    print.error(e_2.message);
                    print.error('----------');
                }
                return [2 /*return*/, exit_codes_1.default.PLUGIN_INVALID];
            case 4: return [3 /*break*/, 6];
            case 5:
                spinner.fail("\uD83D\uDCA9  invalid ignite plugin");
                return [2 /*return*/, exit_codes_1.default.PLUGIN_INVALID];
            case 6:
                spinner.stop();
                return [2 /*return*/];
        }
    });
}); });
//# sourceMappingURL=import-plugin.js.map